#!/usr/bin/env bash

set -ueo pipefail

LINTBALL_DIR="$(dirname "$(dirname "${BASH_SOURCE[0]}")")"

# shellcheck source=SCRIPTDIR/../lib/utils.bash
source "${LINTBALL_DIR}/lib/utils.bash"

usage() {
  local script_name
  script_name="$(basename "$0")"
  cat <<EOF

$script_name: keep your project tidy with one command.

Linters/formatters used:

JSON,
Markdown, HTML, CSS, SASS.......prettier
JavaScript, TypeScript, JSX.....prettier-eslint
YAML............................prettier, yamllint
sh, bash, dash, ksh, mksh.......shellcheck, shfmt
Bats tests......................shfmt
Python..........................autoflake, autopep8, black, docformatter, isort
Cython..........................autoflake, autopep8, docformatter
Nim.............................nimpretty
Ruby............................rubocop

Usage: $script_name [options] [path â€¦]

Options:
  -h|--help
      Show this help message & exit.
  --version
      Print version & exit.
  --write
      Auto fix any fixable issues. By default $script_name will simply notify
      you of linter issues.
  --list
      List files which lintball has a linter for & would attempt to check or
      fix. Useful for debugging a .lintballrc.json file.
  --config path
      Use the .lintballrc.json config file at path.

https://github.com/elijahr/lintball

EOF
}

export LINTBALL_WRITE="no"
export LINTBALL_LIST="no"
export LINTBALL_CONFIG=""
args=()
while [[ $# -gt 0 ]]; do
  key="$1"

  case $key in
    -h | --help)
      usage
      exit 0
      ;;
    --version)
      echo "v0.3.0"
      exit 0
      ;;
    --write)
      if [ "$LINTBALL_LIST" = "yes" ]; then
        echo -e "Cannot use --write and --list together"
        usage
        exit 1
      fi
      export LINTBALL_WRITE="yes"
      shift
      ;;
    --list)
      if [ "$LINTBALL_WRITE" = "yes" ]; then
        echo -e "Cannot use --write and --list together"
        usage
        exit 1
      fi
      export LINTBALL_LIST="yes"
      shift
      ;;
    --config)
      shift
      LINTBALL_CONFIG="$1"
      shift
      ;;
    -*)
      echo -e "Unknown switch $1"
      usage
      exit 1
      ;;
    *)             # unknown option
      args+=("$1") # save it in an array for later
      shift        # past argument
      ;;
  esac
done

if [ "${#args[@]}" -gt 0 ]; then
  set -- "${args[@]}" # restore positional parameters
fi

if [ -z "$LINTBALL_CONFIG" ]; then
  LINTBALL_CONFIG="$(find_config)"
fi

if [ -n "$LINTBALL_CONFIG" ]; then
  echo "# Using config file ${LINTBALL_CONFIG}"
  echo
  load_config "$LINTBALL_CONFIG" || exit 1
fi

list() {
  local line
  eval "$(cmd_find "$@")" | while read -r line; do
    if assert_handled_path "$line"; then
      line="$(normalize_path "$line")"
      echo "$line"
    fi
  done
  exit 0
}

main() {
  local tmp line
  tmp="$(mktemp -d)"
  eval "$(cmd_find "$@")" | while read -r line; do
    if assert_handled_path "$line"; then
      lint_any "$LINTBALL_WRITE" "$line" || touch "${tmp}/error"
    fi
  done

  status=0
  if [ -f "${tmp}/error" ]; then
    status=1
  fi
  rm -r "$tmp"
  exit "$status"
}

if [ "$LINTBALL_LIST" = "yes" ]; then
  list "$@"
else
  main "$@"
fi
